{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyChamber \u00b6 PyChamber is an open-source application written with Qt to take anechoic chamber measurements. All measurements are saved as scikit-rf objects which greatly simplifies post-processing.","title":"Overview"},{"location":"#pychamber","text":"PyChamber is an open-source application written with Qt to take anechoic chamber measurements. All measurements are saved as scikit-rf objects which greatly simplifies post-processing.","title":"PyChamber"},{"location":"SUMMARY/","text":"Overview Usage Reference Installation Contributing Changelog","title":"SUMMARY"},{"location":"changelog/","text":"{% include-markdown \"../CHANGELOG.md\" %}","title":"Changelog"},{"location":"contributing/","text":"{% include-markdown \"../CONTRIBUTING.md\" %}","title":"Contributing"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 Todo! From source \u00b6 The source for PyChamber can be downloaded from the Github repo . You can either clone the public repository: git clone git://github.com/hrg-lab/pychamber Or download the tarball: curl -OJL https://github.com/hrg-lab/pychamber/tarball/master Once you have a copy of the source, you can install it with: pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"Todo!","title":"Stable release"},{"location":"installation/#from-source","text":"The source for PyChamber can be downloaded from the Github repo . You can either clone the public repository: git clone git://github.com/hrg-lab/pychamber Or download the tarball: curl -OJL https://github.com/hrg-lab/pychamber/tarball/master Once you have a copy of the source, you can install it with: pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 Todo: How to use PyChamber","title":"Usage"},{"location":"usage/#usage","text":"Todo: How to use PyChamber","title":"Usage"},{"location":"reference/SUMMARY/","text":"pychamber classes app jog_worker logger network_model polarization positioner scan_worker settings_manager worker controller launch lib ui about calibration freq_spin_box log_viewer main_window mplwidget pop_ups pyconsole resources_rc settings_dialog utils","title":"SUMMARY"},{"location":"reference/__init__/","text":"Top-level package for PyChamber.","title":"pychamber"},{"location":"reference/controller/","text":"","title":"controller"},{"location":"reference/launch/","text":"","title":"launch"},{"location":"reference/lib/","text":"","title":"lib"},{"location":"reference/utils/","text":"","title":"utils"},{"location":"reference/classes/__init__/","text":"","title":"classes"},{"location":"reference/classes/app/","text":"","title":"app"},{"location":"reference/classes/jog_worker/","text":"","title":"jog_worker"},{"location":"reference/classes/logger/","text":"","title":"logger"},{"location":"reference/classes/network_model/","text":"NetworkModel \u00b6 Bases: NetworkSet Set of Networks that represent one meausurement. Extends scikit-rf's NetworkSet to provide helper functions relevant to chamber measurements. Attributes: Name Type Description freqs np . ndarray List of frequencies in the set azimuths np . ndarray List of azimuths in the set elevations np . ndarray List of elevations in the set Source code in classes/network_model.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class NetworkModel ( NetworkSet ): \"\"\"Set of Networks that represent one meausurement. Extends scikit-rf's NetworkSet to provide helper functions relevant to chamber measurements. Attributes: freqs: List of frequencies in the set azimuths: List of azimuths in the set elevations: List of elevations in the set \"\"\" @property def freqs ( self ) -> np . ndarray : \"\"\"The list of frequencies contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return self [ 0 ] . frequency . f # type: ignore @property def azimuths ( self ) -> np . ndarray : \"\"\"The list of azimuths contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return np . array ( [ n . params [ 'azimuth' ] for n in self . sel ({ 'elevation' : 0 })] # type: ignore ) . reshape ( - 1 , 1 ) @property def elevations ( self ) -> np . ndarray : \"\"\"The list of elevations contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return np . array ( [ n . params [ 'elevation' ] for n in self . sel ({ 'azimuth' : 0 })] # type: ignore ) . reshape ( - 1 , 1 ) def __str__ ( self ) -> str : if len ( self ) == 0 : return \"Empty NetworkModel\" else : return ( \"NetworkModel: \\n \" f \" { self [ 0 ] . frequency . f } \" # type: ignore f \" { len ( self . elevations ) } Elevations\" f \" { len ( self . azimuths ) } Azimuths\" ) def mags ( self , freq : Optional [ str ] = None , azimuth : Optional [ float ] = None , elevation : Optional [ float ] = None , ) -> np . ndarray : \"\"\"Fetches data filtered by the arguments provided. Any argument not passed will be interpreted as requesting all values. Args: freq: Frequency of interest azimuth: Azimuth of interest elevation: Elevation of interest \"\"\" if len ( self ) == 0 : return np . array ([]) else : params = dict () if azimuth : params [ 'azimuth' ] = azimuth if elevation : params [ 'elevation' ] = elevation if freq : return np . array ([ n [ freq ] . s_db for n in self . sel ( params )]) . reshape ( - 1 , 1 ) # type: ignore else : return self . sel ( params )[ 0 ] . s_db . reshape ( - 1 , 1 ) # type: ignore def append ( self , ntwk : Network ) -> None : self . ntwk_set . append ( ntwk ) # type: ignore azimuths () property \u00b6 The list of azimuths contained in the set. Source code in classes/network_model.py 30 31 32 33 34 35 36 37 38 @property def azimuths ( self ) -> np . ndarray : \"\"\"The list of azimuths contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return np . array ( [ n . params [ 'azimuth' ] for n in self . sel ({ 'elevation' : 0 })] # type: ignore ) . reshape ( - 1 , 1 ) elevations () property \u00b6 The list of elevations contained in the set. Source code in classes/network_model.py 40 41 42 43 44 45 46 47 48 @property def elevations ( self ) -> np . ndarray : \"\"\"The list of elevations contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return np . array ( [ n . params [ 'elevation' ] for n in self . sel ({ 'azimuth' : 0 })] # type: ignore ) . reshape ( - 1 , 1 ) freqs () property \u00b6 The list of frequencies contained in the set. Source code in classes/network_model.py 22 23 24 25 26 27 28 @property def freqs ( self ) -> np . ndarray : \"\"\"The list of frequencies contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return self [ 0 ] . frequency . f # type: ignore mags ( freq = None , azimuth = None , elevation = None ) \u00b6 Fetches data filtered by the arguments provided. Any argument not passed will be interpreted as requesting all values. Parameters: Name Type Description Default freq Optional [ str ] Frequency of interest None azimuth Optional [ float ] Azimuth of interest None elevation Optional [ float ] Elevation of interest None Source code in classes/network_model.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def mags ( self , freq : Optional [ str ] = None , azimuth : Optional [ float ] = None , elevation : Optional [ float ] = None , ) -> np . ndarray : \"\"\"Fetches data filtered by the arguments provided. Any argument not passed will be interpreted as requesting all values. Args: freq: Frequency of interest azimuth: Azimuth of interest elevation: Elevation of interest \"\"\" if len ( self ) == 0 : return np . array ([]) else : params = dict () if azimuth : params [ 'azimuth' ] = azimuth if elevation : params [ 'elevation' ] = elevation if freq : return np . array ([ n [ freq ] . s_db for n in self . sel ( params )]) . reshape ( - 1 , 1 ) # type: ignore else : return self . sel ( params )[ 0 ] . s_db . reshape ( - 1 , 1 ) # type: ignore","title":"network_model"},{"location":"reference/classes/network_model/#classes.network_model.NetworkModel","text":"Bases: NetworkSet Set of Networks that represent one meausurement. Extends scikit-rf's NetworkSet to provide helper functions relevant to chamber measurements. Attributes: Name Type Description freqs np . ndarray List of frequencies in the set azimuths np . ndarray List of azimuths in the set elevations np . ndarray List of elevations in the set Source code in classes/network_model.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class NetworkModel ( NetworkSet ): \"\"\"Set of Networks that represent one meausurement. Extends scikit-rf's NetworkSet to provide helper functions relevant to chamber measurements. Attributes: freqs: List of frequencies in the set azimuths: List of azimuths in the set elevations: List of elevations in the set \"\"\" @property def freqs ( self ) -> np . ndarray : \"\"\"The list of frequencies contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return self [ 0 ] . frequency . f # type: ignore @property def azimuths ( self ) -> np . ndarray : \"\"\"The list of azimuths contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return np . array ( [ n . params [ 'azimuth' ] for n in self . sel ({ 'elevation' : 0 })] # type: ignore ) . reshape ( - 1 , 1 ) @property def elevations ( self ) -> np . ndarray : \"\"\"The list of elevations contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return np . array ( [ n . params [ 'elevation' ] for n in self . sel ({ 'azimuth' : 0 })] # type: ignore ) . reshape ( - 1 , 1 ) def __str__ ( self ) -> str : if len ( self ) == 0 : return \"Empty NetworkModel\" else : return ( \"NetworkModel: \\n \" f \" { self [ 0 ] . frequency . f } \" # type: ignore f \" { len ( self . elevations ) } Elevations\" f \" { len ( self . azimuths ) } Azimuths\" ) def mags ( self , freq : Optional [ str ] = None , azimuth : Optional [ float ] = None , elevation : Optional [ float ] = None , ) -> np . ndarray : \"\"\"Fetches data filtered by the arguments provided. Any argument not passed will be interpreted as requesting all values. Args: freq: Frequency of interest azimuth: Azimuth of interest elevation: Elevation of interest \"\"\" if len ( self ) == 0 : return np . array ([]) else : params = dict () if azimuth : params [ 'azimuth' ] = azimuth if elevation : params [ 'elevation' ] = elevation if freq : return np . array ([ n [ freq ] . s_db for n in self . sel ( params )]) . reshape ( - 1 , 1 ) # type: ignore else : return self . sel ( params )[ 0 ] . s_db . reshape ( - 1 , 1 ) # type: ignore def append ( self , ntwk : Network ) -> None : self . ntwk_set . append ( ntwk ) # type: ignore","title":"NetworkModel"},{"location":"reference/classes/network_model/#classes.network_model.NetworkModel.azimuths","text":"The list of azimuths contained in the set. Source code in classes/network_model.py 30 31 32 33 34 35 36 37 38 @property def azimuths ( self ) -> np . ndarray : \"\"\"The list of azimuths contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return np . array ( [ n . params [ 'azimuth' ] for n in self . sel ({ 'elevation' : 0 })] # type: ignore ) . reshape ( - 1 , 1 )","title":"azimuths()"},{"location":"reference/classes/network_model/#classes.network_model.NetworkModel.elevations","text":"The list of elevations contained in the set. Source code in classes/network_model.py 40 41 42 43 44 45 46 47 48 @property def elevations ( self ) -> np . ndarray : \"\"\"The list of elevations contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return np . array ( [ n . params [ 'elevation' ] for n in self . sel ({ 'azimuth' : 0 })] # type: ignore ) . reshape ( - 1 , 1 )","title":"elevations()"},{"location":"reference/classes/network_model/#classes.network_model.NetworkModel.freqs","text":"The list of frequencies contained in the set. Source code in classes/network_model.py 22 23 24 25 26 27 28 @property def freqs ( self ) -> np . ndarray : \"\"\"The list of frequencies contained in the set.\"\"\" if len ( self ) == 0 : return np . array ([]) else : return self [ 0 ] . frequency . f # type: ignore","title":"freqs()"},{"location":"reference/classes/network_model/#classes.network_model.NetworkModel.mags","text":"Fetches data filtered by the arguments provided. Any argument not passed will be interpreted as requesting all values. Parameters: Name Type Description Default freq Optional [ str ] Frequency of interest None azimuth Optional [ float ] Azimuth of interest None elevation Optional [ float ] Elevation of interest None Source code in classes/network_model.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def mags ( self , freq : Optional [ str ] = None , azimuth : Optional [ float ] = None , elevation : Optional [ float ] = None , ) -> np . ndarray : \"\"\"Fetches data filtered by the arguments provided. Any argument not passed will be interpreted as requesting all values. Args: freq: Frequency of interest azimuth: Azimuth of interest elevation: Elevation of interest \"\"\" if len ( self ) == 0 : return np . array ([]) else : params = dict () if azimuth : params [ 'azimuth' ] = azimuth if elevation : params [ 'elevation' ] = elevation if freq : return np . array ([ n [ freq ] . s_db for n in self . sel ( params )]) . reshape ( - 1 , 1 ) # type: ignore else : return self . sel ( params )[ 0 ] . s_db . reshape ( - 1 , 1 ) # type: ignore","title":"mags()"},{"location":"reference/classes/polarization/","text":"","title":"polarization"},{"location":"reference/classes/positioner/","text":"Positioner \u00b6 Bases: ABC A positioner that holds the antenna under test. Establishes a serial port and issues commands over it to control a positioner using commands determined by a config file. Source code in classes/positioner.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 class Positioner ( ABC ): \"\"\"A positioner that holds the antenna under test. Establishes a serial port and issues commands over it to control a positioner using commands determined by a config file. \"\"\" def __init__ ( self , name : str , serial_port : str ) -> None : \"\"\"Create a Positioner object. Args: name: model name of positioner (e.g. D6050) serial_port: port name of serial port connection \"\"\" yaml_str = pkg_resources . resource_string ( __name__ , f \"configs/ { name } .yaml\" ) . decode ( 'utf-8' ) self . config = OmegaConf . create ( yaml_str ) self . serial = serial . Serial ( serial_port , self . config . serial . baudrate , timeout = self . config . serial . timeout ) def __enter__ ( self ) -> Positioner : return self def __exit__ ( self , exc_type , exc_value , exc_tb ) -> None : self . close () def close ( self ) -> None : # self.save_state() self . serial . close () def zero ( self ) -> None : self . azimuth_deg = 0.0 self . elevation_deg = 0.0 @abstractmethod def write ( self , cmd : str ) -> Optional [ BoardResponse ]: pass @abstractmethod def query ( self , cmd : str ) -> str : pass @abstractmethod def abort_all ( self ) -> None : pass @property # type: ignore @abstractmethod def current_azimuth ( self ) -> float : pass @current_azimuth . setter # type: ignore @abstractmethod def current_azimuth ( self ) -> None : pass @property # type: ignore @abstractmethod def current_elevation ( self ) -> float : pass @current_elevation . setter # type: ignore @abstractmethod def current_elevation ( self ) -> None : pass @abstractmethod def move_azimuth_relative ( self , angle : float ) -> None : pass @abstractmethod def move_azimuth_absolute ( self , angle : float ) -> None : pass @abstractmethod def move_elevation_relative ( self , angle : float ) -> None : pass @abstractmethod def move_elevation_absolute ( self , angle : float ) -> None : pass __init__ ( name , serial_port ) \u00b6 Create a Positioner object. Parameters: Name Type Description Default name str model name of positioner (e.g. D6050) required serial_port str port name of serial port connection required Source code in classes/positioner.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def __init__ ( self , name : str , serial_port : str ) -> None : \"\"\"Create a Positioner object. Args: name: model name of positioner (e.g. D6050) serial_port: port name of serial port connection \"\"\" yaml_str = pkg_resources . resource_string ( __name__ , f \"configs/ { name } .yaml\" ) . decode ( 'utf-8' ) self . config = OmegaConf . create ( yaml_str ) self . serial = serial . Serial ( serial_port , self . config . serial . baudrate , timeout = self . config . serial . timeout )","title":"positioner"},{"location":"reference/classes/positioner/#classes.positioner.Positioner","text":"Bases: ABC A positioner that holds the antenna under test. Establishes a serial port and issues commands over it to control a positioner using commands determined by a config file. Source code in classes/positioner.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 class Positioner ( ABC ): \"\"\"A positioner that holds the antenna under test. Establishes a serial port and issues commands over it to control a positioner using commands determined by a config file. \"\"\" def __init__ ( self , name : str , serial_port : str ) -> None : \"\"\"Create a Positioner object. Args: name: model name of positioner (e.g. D6050) serial_port: port name of serial port connection \"\"\" yaml_str = pkg_resources . resource_string ( __name__ , f \"configs/ { name } .yaml\" ) . decode ( 'utf-8' ) self . config = OmegaConf . create ( yaml_str ) self . serial = serial . Serial ( serial_port , self . config . serial . baudrate , timeout = self . config . serial . timeout ) def __enter__ ( self ) -> Positioner : return self def __exit__ ( self , exc_type , exc_value , exc_tb ) -> None : self . close () def close ( self ) -> None : # self.save_state() self . serial . close () def zero ( self ) -> None : self . azimuth_deg = 0.0 self . elevation_deg = 0.0 @abstractmethod def write ( self , cmd : str ) -> Optional [ BoardResponse ]: pass @abstractmethod def query ( self , cmd : str ) -> str : pass @abstractmethod def abort_all ( self ) -> None : pass @property # type: ignore @abstractmethod def current_azimuth ( self ) -> float : pass @current_azimuth . setter # type: ignore @abstractmethod def current_azimuth ( self ) -> None : pass @property # type: ignore @abstractmethod def current_elevation ( self ) -> float : pass @current_elevation . setter # type: ignore @abstractmethod def current_elevation ( self ) -> None : pass @abstractmethod def move_azimuth_relative ( self , angle : float ) -> None : pass @abstractmethod def move_azimuth_absolute ( self , angle : float ) -> None : pass @abstractmethod def move_elevation_relative ( self , angle : float ) -> None : pass @abstractmethod def move_elevation_absolute ( self , angle : float ) -> None : pass","title":"Positioner"},{"location":"reference/classes/positioner/#classes.positioner.Positioner.__init__","text":"Create a Positioner object. Parameters: Name Type Description Default name str model name of positioner (e.g. D6050) required serial_port str port name of serial port connection required Source code in classes/positioner.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def __init__ ( self , name : str , serial_port : str ) -> None : \"\"\"Create a Positioner object. Args: name: model name of positioner (e.g. D6050) serial_port: port name of serial port connection \"\"\" yaml_str = pkg_resources . resource_string ( __name__ , f \"configs/ { name } .yaml\" ) . decode ( 'utf-8' ) self . config = OmegaConf . create ( yaml_str ) self . serial = serial . Serial ( serial_port , self . config . serial . baudrate , timeout = self . config . serial . timeout )","title":"__init__()"},{"location":"reference/classes/scan_worker/","text":"","title":"scan_worker"},{"location":"reference/classes/settings_manager/","text":"","title":"settings_manager"},{"location":"reference/classes/worker/","text":"","title":"worker"},{"location":"reference/ui/__init__/","text":"","title":"ui"},{"location":"reference/ui/about/","text":"","title":"about"},{"location":"reference/ui/calibration/","text":"","title":"calibration"},{"location":"reference/ui/freq_spin_box/","text":"","title":"freq_spin_box"},{"location":"reference/ui/log_viewer/","text":"","title":"log_viewer"},{"location":"reference/ui/main_window/","text":"","title":"main_window"},{"location":"reference/ui/mplwidget/","text":"Qt5 MatPlotLib Widget. isort:skip_file","title":"mplwidget"},{"location":"reference/ui/pop_ups/","text":"","title":"pop_ups"},{"location":"reference/ui/pyconsole/","text":"","title":"pyconsole"},{"location":"reference/ui/resources_rc/","text":"","title":"resources_rc"},{"location":"reference/ui/settings_dialog/","text":"","title":"settings_dialog"}]}